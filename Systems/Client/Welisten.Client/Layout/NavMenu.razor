@using Microsoft.AspNetCore.Components.Authorization
@using Welisten.Client.Pages.Authorization.Services
@using Welisten.Client.Providers
@using System.Security.Claims
@using NuGet.Protocol

@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

<MudAppBar Fixed="false" Dense="true">
    <MudIconButton href="/">
        <MudImage Src="/icons/logo.png" Alt="Logo" Width="100"></MudImage>
    </MudIconButton>
    <MudSpacer />
    <MudButtonGroup OverrideStyles="false">
        <AuthorizeView>
            <Authorized>
                <MudButton Href="/articles" Variant="Variant.Filled" Color="Color.Info"><MudIcon Icon="@Icons.Material.Rounded.Article"/> Articles</MudButton>
                <MudButton Href="/chat" Variant="Variant.Filled" Color="Color.Warning"><MudIcon Icon="@Icons.Material.Rounded.Chat"/> Chat</MudButton>
                <MudButton Href="/moods" Variant="Variant.Filled" Color="Color.Primary"><MudIcon Icon="@Icons.Material.Rounded.TagFaces"/> Mood Tracking</MudButton>
                <MudButton Href="/createPost" Variant="Variant.Filled" Color="Color.Success"><MudIcon Icon="@Icons.Material.Rounded.Add"/> Post a story</MudButton>
                <MudButton @onclick="@(() => NavManager.NavigateTo("/profile"))" Color="Color.Secondary" Variant="Variant.Filled">@name</MudButton>
                <MudButton @onclick="Logout" Color="Color.Primary" Variant="Variant.Filled">Logout</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="/register" Color="Color.Secondary" Variant="Variant.Text">Sign Up</MudButton>
                <MudButton Href="/login" Color="Color.Primary" Variant="Variant.Filled">Log in</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudButtonGroup>
</MudAppBar>


@code{
    private const string Logo = "../wwwroot/icons/logo.png";
    
    private async Task Logout()
    {
        await AuthorizationService.Logout();
    }
    private string? authMessage;
    private string? name;

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var identity = user.Identity as ClaimsIdentity;
            var claims = identity!.Claims.ToList();

            var type = claims[2].Type;
            name = claims.Find(c => c.Type.ToString() == "name")!.Value;
            authMessage = $"{name}is authenticated.";
        }
        else
        {
            authMessage = "The user is NOT authenticated.";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
    }
}