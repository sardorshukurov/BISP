@page "/moods"
@using Microsoft.AspNetCore.Components.Authorization
@using Welisten.Client.Components
@using Welisten.Client.Pages.Moods.Services
@using Welisten.Client.Pages.Moods.Models
@using Welisten.Client.Pages.Moods.Components

@inject IMoodService MoodService;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;
@inject NavigationManager NavManager

<AuthorizeView>
    <Authorized>
        <MudButton OnClick="@(() => CreateEditMoodRecord())" Variant="Variant.Filled" 
                   Color="Color.Success" Style="margin-bottom: 15px"><MudIcon Icon="@Icons.Material.Rounded.Add"/> Share your mood!</MudButton>
        
        
        <h3>Your mood records</h3>
        
        @foreach (var mood in _moodRecords)
        {
            <div style="display: flex; justify-content: center; vertical-align: center;">
                <MudText Typo="Typo.h2" Style="padding: 0">@mood.Mood.ImageLink</MudText>
                <MudCard Width="35%" Square="false" Outlined="true"
                         Style="margin: 10px 0px 10px 0px; min-width: 300px; border-radius: 1rem">
                    <MudCardContent>
                        <MudContainer Style="padding: 0; display: flex; justify-content: space-between;">
                            <MudText Typo="Typo.subtitle2" Color="Color.Primary">@mood.Mood.Name â€“ @mood.Event.Name</MudText>
                            <MudText Typo="Typo.subtitle2">@mood.Date.ToLocalTime().ToString("dd/MM/yyyy")</MudText>
                        </MudContainer>
                        <MudContainer Style="padding: 0">
                            <MudText Typo="Typo.body1" Align="Align.Left"
                                     Style="padding: 15px 0 0 0; overflow-wrap: break-word;">
                                @mood.Text
                            </MudText>
                        </MudContainer>
                    </MudCardContent>
                </MudCard>
                <MudCardActions Style="display: flex; flex-direction: column; vertical-align: center">
                    <MudButton OnClick="@(() => CreateEditMoodRecord(@mood.Id))" Size="Size.Small"
                               Variant="Variant.Text">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Rounded.Edit"/>
                    </MudButton>
                    <MudButton OnClick="@(() => DeleteMoodRecord(@mood.Id))" Size="Size.Small"
                               Variant="Variant.Text">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Rounded.Delete"/>
                    </MudButton>
                </MudCardActions>
            </div>

        } 
    </Authorized>
    <NotAuthorized>
        @{
            NavManager.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    #region Properties

    private IEnumerable<MoodRecordModel> _moodRecords = [];

    #endregion

    private async void CreateEditMoodRecord(Guid? guid = null)
    {
        var parameters = new DialogParameters<_createEditMood>();
        IDialogReference dialog;
        DialogResult result;
        if (guid == null)
        {
            parameters.Add(x => x.TitleText, "Share your mood");
            dialog = await DialogService.ShowAsync<_createEditMood>("Create", parameters);
            result = await dialog.Result;
        }
        else
        {
            parameters.Add(x => x.TitleText, "Edit the mood");
            parameters.Add(x => x.MoodRecordId, guid);
            dialog = await DialogService.ShowAsync<_createEditMood>("Edit", parameters);
            result = await dialog.Result;
        }

        if (!result.Canceled)
        {
            _moodRecords = await MoodService.GetAllMoodRecords();
            StateHasChanged();
        }
    }

    private async void DeleteMoodRecord(Guid id)
    {
        var parameters = new DialogParameters<_dialog>();
        parameters.Add(x => x.ContentText, "Do you really want to delete the mood record? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);
        
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<_dialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await MoodService.DeleteMoodRecord(id);
                Snackbar.Add("Deleted");
                _moodRecords = await MoodService.GetAllMoodRecords();
                StateHasChanged();
            }
            catch (Exception)
            {
                Snackbar.Add("Something went wrong", Severity.Error);
            }
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _moodRecords = await MoodService.GetAllMoodRecords();
        }
        catch (Exception)
        {
            Snackbar.Add("Something went wrong", Severity.Error);
        }
    }
}