@page "/posts/{PostId:guid}"
@using Welisten.Client.Pages.Posts.Services
@using Welisten.Client.Models.Post
@using Welisten.Client.Pages.Comments.Models
@using Welisten.Client.Pages.Comments.Services
@using Welisten.Common.Extensions
@using Microsoft.AspNetCore.Components.Authorization

@inject IPostService PostService;
@inject ICommentService CommentService;
@inject ISnackbar Snackbar;

<MudCard Width="50%" Square="false" Outlined="true" 
         Style="margin-bottom:50px; max-width: 600px; border-radius: 1rem;">
    <MudCardContent Align="left">
        <MudContainer Style="padding:0; display: flex; justify-content: space-between; margin-bottom: 10px">
            <MudText Color="Color.Primary" Typo="Typo.subtitle2">@(_post.User == null ? "Anonymous" : _post.User.Name)</MudText>
            <MudText Typo="Typo.subtitle2">@_post.Date.ToLocalTime().FormatDate()</MudText>
        </MudContainer>
        
        <MudText Typo="Typo.h6">@_post.Title</MudText>
        <MudText Typo="Typo.body2">@_post.Text</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Text" Color="Color.Dark" OnClick="@(() => @LikeOrDisLike(@_post.Id))"><MudIcon Icon="@Icons.Material.Rounded.AddReaction"/>@_post.LikeCount</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Dark"><MudIcon Icon="@Icons.Material.Rounded.Comment"/>@_post.CommentCount</MudButton>
    </MudCardActions>
</MudCard>

<AuthorizeView>
    <Authorized>
        <MudCard Width="50%" Square="false" Outlined="true" 
                 Style="margin-bottom:50px; max-width: 600px; border-radius: 1rem;">
            <MudForm Model="@_model" @ref="@_form" Validation="@(_validator.ValidateValue)">
                <MudCardContent>
                    <MudTextField @bind-Value="@_model.Text"
                                  For="@((() => _model.Text))"
                                  Immediate="true"
                                  Label="Comment"
                                  AutoGrow="true"/>
                    <MudCheckBox @bind-Value="@_model.IsAnonymous"
                                 For="@(() => _model.IsAnonymous)"
                                 Label="Post Anonymously?"/>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Comment</MudButton>
                </MudCardContent>
            </MudForm>
        </MudCard>
    </Authorized>
</AuthorizeView>

<MudText Color="Color.Primary" Typo="Typo.h6" Align="Align.Center">Comments</MudText>
@foreach (var comment in _comments)
{
    <MudCard Width="50%" Square="false" Outlined="true" 
             Style="margin-bottom:50px; max-width: 600px; border-radius: 1rem;">
        <MudCardContent Align="left">
            <MudContainer Style="padding:0; display: flex; justify-content: space-between; margin-bottom: 10px">
                <MudText Color="Color.Primary" Typo="Typo.subtitle2">@(comment.User == null ? "Anonymous" : comment.User.Name)</MudText>
                <MudText Typo="Typo.subtitle2">@comment.Date.ToLocalTime().FormatDate()</MudText>
            </MudContainer>
        
            <MudText Typo="Typo.body2">@comment.Text</MudText>
        </MudCardContent>
    </MudCard>
}

@code {
    [Parameter]
    public Guid PostId { get; set; }

    private MudForm _form;
    private CreateCommentModel _model = new CreateCommentModel();
    private CreateCommentModelValidator _validator = new CreateCommentModelValidator();
    
    private PostModel _post = new PostModel
    {
        Title = null,
        Text = null,
        IsAnonymous = false,
        Date = default,
        Topics = null
    };

    private IEnumerable<CommentModel> _comments = [];
    
    protected override async Task OnInitializedAsync()
    {
        _post = await PostService.GetPostById(PostId);
        _comments = await CommentService.GetComments(PostId);
    }
    private async Task LikeOrDisLike(Guid id)
    {
        try
        {
            // Call the PostService method to like or dislike the post
            await PostService.LikeOrDisLike(id);

            var updatedPost = await PostService.GetPostById(id);
            // Update the like count of the post with the new data
            _post.LikeCount = updatedPost.LikeCount;
        }
        catch (Exception ex)
        {
            // Handle any exceptions that occur during the operation
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    
    private async Task Submit()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            try
            {
                _model.PostId = PostId;
                await CommentService.Comment(_model);
                _comments = await CommentService.GetComments(PostId);
                Snackbar.Add("Comment is added!");
            }
            catch (Exception e)
            {
                Snackbar.Add(e.Message, Severity.Error);
            }
        }
    }
}