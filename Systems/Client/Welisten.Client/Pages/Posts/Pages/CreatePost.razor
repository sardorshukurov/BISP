@page "/CreatePost"
@using Welisten.Client.Models.Post
@using Welisten.Client.Pages.Posts.Services
@using Microsoft.AspNetCore.Components.Authorization

@inject NavigationManager NavManager
@inject ISnackbar Snackbar
@inject IPostService PostService;

<AuthorizeView>
    <Authorized>
        <MudText Typo="Typo.h6" Align="Align.Center">Share your story</MudText>
        <MudCard Width="50%" Square="false" Outlined="true"
                 Style="max-width: 500px; border-radius: 1rem">
            <MudForm Model="@_model" @ref="@_form" Validation="@(_validator.ValidateValue)" ValidationDelay="0">
                <MudCardContent>
                    <MudTextField @bind-Value="@_model.Title"
                                  For="@((() => _model.Title))"
                                  Label="Title"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"/>
                    <MudTextField @bind-Value="@_model.Text"
                                  For="@((() => _model.Text))"
                                  Label="Description"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  AutoGrow="true"/>
                    <MudCheckBox @bind-Value="@_model.IsAnonymous"
                                 For="@(() => _model.IsAnonymous)"
                                 Label="Post Anonymously?"/>
                    <MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" T="Guid"
                               Label="Topics" MultiSelection="true" 
                               @bind-SelectedValues="@_model.Topics"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense">
                        @foreach (TopicModel topic in _topics)
                        {
                            <MudSelectItem T="Guid" Value="@topic.Id">@topic.Type</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
            </MudForm>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Post</MudButton>
            </MudCardActions>
        </MudCard>
    </Authorized>
    <NotAuthorized>
        @{
            NavManager.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private MudForm _form;
    private CreatePostModelValidator _validator = new CreatePostModelValidator();
    private CreatePostModel _model = new CreatePostModel();
    private IEnumerable<TopicModel> _topics = [];
    private bool _multiSelectionTextChoice;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _topics = await PostService.GetTopics();
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }
    private async Task Submit()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            Snackbar.Add("Submitted!");
            await PostService.CreatePost(_model);
            NavManager.NavigateTo("/");
        }
    }
    private string GetMultiSelectionText(List<string> selectedValues)
    {
        if (_multiSelectionTextChoice)
        {
            return $"Selected topic{(selectedValues.Count > 1 ? "s" : "")}: {string.Join(", ", selectedValues.Select(x => x))}";
        }
        else
        {
            return $"{selectedValues.Count} topic{(selectedValues.Count > 1 ? "s have":" has")} been selected";
        }
    }
}