@page "/register"
@using Welisten.Client.Pages.Authorization.Services
@using Welisten.Client.Models.Authorization
@using System.ComponentModel.DataAnnotations
@using Welisten.Client.Pages.Authorization.Models

@inject IAuthorizationService AuthorizationService
@inject NavigationManager NavigationManager
 
<MudGrid Justify="Justify.Center" Class="pa-10">
    <MudItem xs="7" sm="4">
        <MudPaper Class="pa-4">
            <EditForm Model="@_model" 
                      Validation="@(_validator.ValidateValue)"
                      OnValidSubmit="@OnValidSubmit">
                
                <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-3">Register</MudText>

                <MudAlert Severity="Severity.Error" Class="@(ShowErrors ? "mb-3 d-block" : "d-none")">
                    @Error
                    <br />
                    @ErrorDetail
                </MudAlert>

                <MudTextField T="string"
                              @bind-Value="_model.Name" For="@(() => _model.Name)"
                              Label="Username"
                              Required="true"
                              RequiredError="Username is required"
                              HelperText="Input your username"
                              Validation="@(() => _model.Name.Length > 5)"/>
                <MudTextField T="string"
                              @bind-Value="_model.FirstName" For="@(() => _model.FirstName)"
                              Label="First name"
                              Required="true"
                              RequiredError="First name is required"
                              HelperText="Input your first name"/>
                <MudTextField T="string"
                              @bind-Value="_model.LastName" For="@(() => _model.LastName)"
                              Label="Last name"
                              Required="false"
                              HelperText="Input your last name"/>
                <MudTextField T="string"
                                @bind-Value="_model.Email" For="@(() => _model.Email)"
                                Label="Email" 
                                Required="true" 
                                RequiredError="Email is required!"
                                HelperText="Input your email"
                                Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"/>
                <MudTextField @bind-Value="_model.Password" For="@(() => _model.Password)"
                                Label="Password" 
                                HelperText="Input your password"
                                InputType="@PasswordInput"
                                Adornment="Adornment.End"
                                AdornmentIcon="@PasswordInputIcon"
                                Required="true"
                                RequiredError="Password is required!"
                                OnAdornmentClick="TogglePasswordVisibility" />

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           ButtonType="ButtonType.Submit">Submit</MudButton>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private bool success;
    private MudForm form;

    private RegisterValidator _validator = new RegisterValidator();
    private RegisterModel _model = new RegisterModel();

    private bool PasswordVisibility;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private bool ShowErrors;
    private string Error;
    private string ErrorDetail;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    
    private async Task OnValidSubmit()
    {
        ShowErrors = false;
        Error = "";
        ErrorDetail = "";

        var result = await AuthorizationService.Register(_model);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Error = result.Error;
            ErrorDetail = result.ErrorDescription;
            ShowErrors = true;
        }
    }
}
