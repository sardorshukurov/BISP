@page "/register"
@using Welisten.Client.Pages.Authorization.Services
@using Welisten.Client.Models.Authorization
@using System.ComponentModel.DataAnnotations
@using Welisten.Client.Pages.Authorization.Models

@inject IAuthorizationService AuthorizationService
@inject NavigationManager NavigationManager
@inject ISnackbar SnackBar 

<MudGrid Justify="Justify.Center" Class="pa-10">
    <MudItem xs="7" sm="4">
        <MudPaper Class="pa-4">
            <MudForm Model="@_model" 
                     @ref="@_form"
                     Validation="@(_validator.ValidateValue)"
                     ValidationDelay="0">
                
                <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-3">Register</MudText>

                <MudTextField @bind-Value="@_model.Name" 
                              For="@(() => _model.Name)"
                              Label="Username"
                              Required="true"
                              RequiredError="Username is required"
                              HelperText="Input your username"/>
                <MudTextField @bind-Value="@_model.FirstName" 
                              For="@(() => _model.FirstName)"
                              Label="First name"
                              Required="true"
                              RequiredError="First name is required"
                              HelperText="Input your first name"/>
                <MudTextField @bind-Value="@_model.LastName" 
                              For="@(() => _model.LastName)"
                              Label="Last name"
                              Required="false"
                              HelperText="Input your last name"/>
                <MudTextField @bind-Value="@_model.Email" 
                              For="@(() => _model.Email)"
                                Label="Email" 
                                Required="true" 
                                RequiredError="Email is required!"
                                HelperText="Input your email"
                                Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"/>
                <MudTextField @bind-Value="@_model.Password" 
                              For="@(() => _model.Password)"
                                Label="Password" 
                                HelperText="Input your password"
                                InputType="@_passwordInput"
                                Adornment="Adornment.End"
                                AdornmentIcon="@_passwordInputIcon"
                                Required="true"
                                RequiredError="Password is required!"
                                OnAdornmentClick="TogglePasswordVisibility" />

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           OnClick="@(async () => await Submit())">Submit</MudButton>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private bool _success;
    private MudForm _form;

    private RegisterValidator _validator = new RegisterValidator();
    private RegisterModel _model = new RegisterModel();

    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    
    private async Task Submit()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            var result = await AuthorizationService.Register(_model);

            if (result.Successful)
            {
                SnackBar.Add("Registered!");
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                SnackBar.Add("Something went wrong");
            }
        }
    }
}
