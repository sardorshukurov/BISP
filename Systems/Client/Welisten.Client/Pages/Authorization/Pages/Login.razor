@page "/login"
@using System.ComponentModel.DataAnnotations
@using Welisten.Client.Models.Authorization
@using Welisten.Client.Pages.Authorization.Services

@inject IAuthorizationService AuthorizationService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudGrid Justify="Justify.Center" Class="pa-10">
    <MudItem xs="7" sm="4">
        <MudPaper Class="pa-4">
            <MudForm Model="@_model" 
                     @ref="@_form"
                     Validation="@(_validator.ValidateValue)">
                
                <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-3">Sign In</MudText>

                <MudTextField T="string"
                              @bind-Value="@_model.Email" 
                              For="@(() => _model.Email)"
                                Label="Email" 
                                Required="true" 
                                RequiredError="Email is required!"
                                HelperText="Input your username"
                                Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"/>
                <MudTextField @bind-Value="_model.Password" For="@(() => _model.Password)"
                                Label="Password" 
                                HelperText="Input your password"
                                InputType="@_passwordInput"
                                Adornment="Adornment.End"
                                AdornmentIcon="@_passwordInputIcon"
                                Required="true"
                                RequiredError="Password is required!"
                                OnAdornmentClick="TogglePasswordVisibility" />

                <div Class="d-flex justify-space-between align-center">
                    <MudCheckBox For="@(() => _model.RememberMe)" @bind-Checked="_model.RememberMe" Label="Remember me?" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>
                </div>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           OnClick="@(async () => await Submit())">Sign In</MudButton>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private bool _success;
    private MudForm _form;
    private LoginValidator _validator = new LoginValidator();
    
    private LoginModel _model = new LoginModel()
    {
        Email = "unstablegoose@mail.com",
        Password = "unstablegoose"
    };

    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private async Task Submit()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            try
            {
                await AuthorizationService.Login(_model);
                Snackbar.Add("Welcome back!");
                NavigationManager.NavigateTo("/", true);
            }
            catch (Exception e)
            {
                Snackbar.Add(e.Message, Severity.Error);
            }
        }
    }
}