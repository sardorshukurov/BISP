@page "/profile"
@using Welisten.Client.Pages.Profile.Models
@using Welisten.Client.Pages.Profile.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Welisten.Client.Components
@using Welisten.Client.Models.Post
@using Welisten.Client.Pages.Comments.Components
@using Welisten.Client.Pages.Comments.Models
@using Welisten.Client.Pages.Comments.Services
@using Welisten.Client.Pages.Posts.Components
@using Welisten.Client.Pages.Posts.Services
@using Welisten.Common.Extensions

@inject IPostService PostService;
@inject ICommentService CommentService;
@inject IUserService UserService;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;
@inject NavigationManager NavManager

<h3>Profile</h3>

<AuthorizeView>
    <Authorized>
        <MudCard Width="50%" Square="false" Outlined="true" 
                 Style="margin-bottom:50px; max-width: 300px; border-radius: 1rem;">
            <MudCardContent Align="left">
                <MudContainer Style="padding:0; margin-bottom: 10px">
                    <MudText Color="Color.Primary" Typo="Typo.subtitle2">User name</MudText>
                    <MudText Color="Color.Dark" Typo="Typo.subtitle1">@($"@{_model.Name}")</MudText>
                </MudContainer>
                <MudContainer Style="padding:0; margin-bottom: 10px">
                    <MudText Color="Color.Primary" Typo="Typo.subtitle2">First name</MudText>
                    <MudText Color="Color.Dark" Typo="Typo.subtitle1">@_model.FirstName</MudText>
                </MudContainer>
                <MudContainer Style="padding:0; margin-bottom: 10px">
                    <MudText Color="Color.Primary" Typo="Typo.subtitle2">Last name</MudText>
                    <MudText Color="Color.Dark" Typo="Typo.subtitle1">@_model.LastName</MudText>
                </MudContainer>
            </MudCardContent>
        </MudCard>
        
        <MudTabs Elevation="4" Rounded="false" Centered="true" Color="@Color.Primary">
            <MudTabPanel Text="My Posts">
                @foreach (var post in _posts)
                {
                    <MudCard @onclick="@(() => NavManager.NavigateTo($"/posts/{post.Id}"))" Width="50%" Square="false" Outlined="true" Style="margin-top: 25px; margin-bottom:25px; max-width: 600px; border-radius: 1rem; cursor: pointer">
                        <MudCardContent Align="left">
                            <MudContainer Style="padding:0; display: flex; justify-content: space-between; margin-bottom: 10px">
                                <MudText Typo="Typo.subtitle2">@post.Date.ToLocalTime().FormatDate()</MudText>
                            </MudContainer>
                            
                            <MudText Typo="Typo.h6">@post.Title</MudText>
                            <MudText Typo="Typo.body2">@post.Text</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton OnClick="@(() => UpdatePost(post.Id))" Variant="Variant.Text" Color="Color.Dark"><MudIcon Icon="@Icons.Material.Rounded.Edit"/></MudButton>
                            <MudButton OnClick="@(() => DeletePost(post.Id))" Variant="Variant.Text" Color="Color.Dark"><MudIcon Icon="@Icons.Material.Rounded.Delete"/></MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            </MudTabPanel>
            <MudTabPanel Text="My Comments">
                @foreach (var comment in _comments)
                {
                    <MudCard @onclick="@(() => NavManager.NavigateTo($"/posts/{comment.PostId}"))" Width="50%" Square="false" Outlined="true" 
                             Style="margin-top: 25px; margin-bottom:25px; max-width: 600px; border-radius: 1rem; cursor: pointer;">
                        <MudCardContent Align="left">
                            <MudContainer Style="padding:0; display: flex; justify-content: space-between; margin-bottom: 10px">
                                <MudText Typo="Typo.subtitle2">@comment.Date.ToLocalTime().FormatDate()</MudText>
                            </MudContainer>
                            
                            <MudText Typo="Typo.body2">@comment.Text</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton OnClick="@(() => UpdateComment(comment.Id))" Variant="Variant.Text" Color="Color.Dark"><MudIcon Icon="@Icons.Material.Rounded.Edit"/></MudButton>
                            <MudButton OnClick="@(() => DeleteComment(comment.Id))" Variant="Variant.Text" Color="Color.Dark"><MudIcon Icon="@Icons.Material.Rounded.Delete"/></MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            </MudTabPanel>
        </MudTabs>
        
        
    </Authorized>
    <NotAuthorized>
        @{
            NavManager.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {

    #region Properties
    
    private UserModel _model = new UserModel();
    private IEnumerable<PostModel> _posts = [];
    private IEnumerable<CommentModel> _comments = [];
    
    #endregion

    
    #region Post Actions
    
    private async void DeletePost(Guid postId)
    {
        var parameters = new DialogParameters<_dialog>();
        parameters.Add(x => x.ContentText, "Do you really want to delete the post? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<_dialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await PostService.Delete(postId);
                Snackbar.Add("Deleted");
                _posts = await PostService.GetPostsByUser();
                StateHasChanged();
            }
            catch (Exception)
            {
                Snackbar.Add("Something went wrong", Severity.Error);
            }
        }
    }

    private async void UpdatePost(Guid postId)
    {
        var parameters = new DialogParameters<_editPost>();
        parameters.Add(x => x.PostId, postId);
        
        var dialog = DialogService.Show<_editPost>("Update", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _posts = await PostService.GetPostsByUser();
            StateHasChanged();
        }
    }
    #endregion
    
    #region Comment Actions
    
    private async void DeleteComment(Guid commentId)
    {
        var parameters = new DialogParameters<_dialog>();
        parameters.Add(x => x.ContentText, "Do you really want to delete the comment? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<_dialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await CommentService.Delete(commentId);
                Snackbar.Add("Deleted");
                _comments = await CommentService.GetCommentsByUser();
                StateHasChanged();
            }
            catch (Exception)
            {
                Snackbar.Add("Something went wrong", Severity.Error);
            }
        }
    }
    
    private async void UpdateComment(Guid commentId)
    {
        var parameters = new DialogParameters<_editComment>();
        parameters.Add(x => x.CommentId, commentId);
        
        var dialog = DialogService.Show<_editComment>("Update", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _comments = await CommentService.GetCommentsByUser();
            StateHasChanged();
        }
    }
    
    #endregion
    
    protected override async Task OnInitializedAsync()
    {        
        try
        {
            _model = await UserService.Get();
            _posts = await PostService.GetPostsByUser();
            _comments = await CommentService.GetCommentsByUser();
        }
        catch (Exception)
        {
            Snackbar.Add("Something went wrong", Severity.Error);
        }
    }
}