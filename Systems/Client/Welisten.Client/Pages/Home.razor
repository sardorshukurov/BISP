@page "/"
@using Welisten.Client.Models.Post
@using Welisten.Client.Pages.Posts.Services
@using Welisten.Common.Extensions

@inject IPostService PostService;
@inject ISnackbar Snackbar

@layout MainLayout

@foreach (var post in _posts)
{
    <MudCard Width="50%" Square="false" Outlined="true" Style="margin-bottom:50px; max-width: 600px; border-radius: 1rem">
        <MudCardContent Align="left">
            <MudContainer Style="padding:0; display: flex; justify-content: space-between; margin-bottom: 10px">
                <MudText Typo="Typo.subtitle2">@(post.User == null ? "Anonymous" : post.User.Name)</MudText>
                <MudText Typo="Typo.subtitle2">@post.Date.ToLocalTime().FormatDate()</MudText>
            </MudContainer>
            
            <MudText Typo="Typo.h6">@post.Title</MudText>
            <MudText Typo="Typo.body2">@post.Text</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Dark" OnClick="@(() => @LikeOrDisLike(@post.Id))"><MudIcon Icon="@Icons.Material.Rounded.AddReaction"/>@post.LikeCount</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Dark"><MudIcon Icon="@Icons.Material.Rounded.Comment"/>@post.CommentCount</MudButton>
        </MudCardActions>
    </MudCard>
}


@code{

    private IEnumerable<PostModel> _posts = new List<PostModel>();

    private async Task ReloadData()
    {
        _posts = await PostService.GetPosts();
    }

    private async Task LikeOrDisLike(Guid id)
    {
        try
        {
            // Call the PostService method to like or dislike the post
            await PostService.LikeOrDisLike(id);

            // Find the post in the _posts collection by its id
            var postToUpdate = _posts.FirstOrDefault(p => p.Id == id);
        
            // Update the like count of the post
            if (postToUpdate != null)
            {
                // Retrieve the latest data for the post from the server
                var updatedPost = await PostService.GetPostById(id);
                // Update the like count of the post with the new data
                postToUpdate.LikeCount = updatedPost.LikeCount;
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that occur during the operation
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}